{"version":3,"sources":["components/Launches.js","components/LaunchItem.js","components/MissionKey.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LAUNCHES_QUERY","gql","_templateObject","Launches","react_default","a","createElement","Fragment","className","MissionKey","react_apollo_esm","query","_ref","loading","error","data","console","log","launches","map","launch","LaunchItem","key","flight_number","React","Component","_ref$launch","mission_name","launch_date_local","launch_success","launchStatus","moment","format","react_router_dom","to","concat","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_name","rocket_id","rocket_type","launchStatusMsg","launchStatusColor","client","ApolloClient","uri","App","style","textAlign","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01fde444.chunk.js","sourcesContent":["import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { LaunchItem, MissionKey } from './index';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nclass Launches extends React.Component {\r\n    render(){\r\n        return (\r\n            <>\r\n                <h1 className=\"display-4 my-3\">Launches</h1>\r\n                <MissionKey />\r\n                <Query query={LAUNCHES_QUERY}>\r\n                    {\r\n                        ({ loading, error, data }) => {\r\n                            if (loading) return <h4>Loading...</h4>;\r\n                            if (error) console.log(error);\r\n                            else return data.launches.map(launch => (\r\n                                            <LaunchItem key={launch.flight_number} launch={launch} />\r\n                                )\r\n                            );\r\n                        }\r\n                    }\r\n                </Query>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Launches;","import React from 'react';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({\r\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\r\n}) {\r\n  const launchStatus =\r\n    launch_success === null\r\n      ? 'text-secondary'\r\n      : launch_success\r\n      ? 'text-success'\r\n      : 'text-danger';\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"col-md-9\">\r\n        <h4 className={launchStatus}>Mission: {mission_name}</h4>\r\n        <p>Date: {moment(launch_date_local).format('MMMM Do YYYY, h:mm a')}</p>\r\n      </div>\r\n      <div className=\"col-md-3\">\r\n        <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n          Launch Details\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function MissionKey(){\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n      rocket {\r\n        rocket_name\r\n        rocket_id\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Launch extends React.Component {\r\n  render() {\r\n    let flight_number = this.props.match.params.flight_number;\r\n    flight_number = parseInt(flight_number, 10);\r\n    return (\r\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <h4>Loading...</h4>;\r\n          if (error) console.log(error);\r\n          else {\r\n            const {\r\n              mission_name,\r\n              launch_year,\r\n              flight_number,\r\n              launch_date_local,\r\n              launch_success,\r\n              rocket: { rocket_name, rocket_id, rocket_type },\r\n            } = data.launch;\r\n            const launchStatusMsg =\r\n              launch_success === null ? 'N/A' : launch_success ? 'Yes' : 'No';\r\n            const launchStatusColor =\r\n              launch_success === null\r\n                ? 'text-secondary'\r\n                : launch_success\r\n                ? 'text-success'\r\n                : 'text-danger';\r\n            return (\r\n              <div>\r\n                <h1 className=\"display-4 my-3\">\r\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\r\n                </h1>\r\n                <h4 className=\"mb-3\">Launch Details:</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">\r\n                    Flight Number: {flight_number}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Launch Year: {launch_year}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Launch Date:{' '}\r\n                    {moment(launch_date_local).format('MMMM Do YYYY, h:mm a')}\r\n                  </li>\r\n                  <li className={`list-group-item`}>\r\n                    Launch Successful:{' '}\r\n                    <span className={launchStatusColor}>{launchStatusMsg}</span>\r\n                  </li>\r\n                </ul>\r\n                <h4 className=\"my-3\">Rocket Details:</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                  <li className=\"list-group-item\">\r\n                    Rocket Name: {rocket_name}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Rocket Type: {rocket_type}\r\n                  </li>\r\n                </ul>\r\n                <hr />\r\n                <Link to=\"/\" className=\"btn btn-secondary\">\r\n                  Back\r\n                </Link>\r\n              </div>\r\n            );\r\n          }\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Launch;\r\n","import React from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Launches, Launch } from './components';\r\nimport './App.css';\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql',\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div className=\"container\">\r\n          <h1 style={{ textAlign: 'center' }}>SpaceX</h1>\r\n          <Route exact path=\"/\" component={Launches} />\r\n          <Route path=\"/launch/:flight_number\" component={Launch} />\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}